name: CI/CD Pipeline for Weather Dashboard

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository so the runner has your code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up the Python environment.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Step 3: Cache your Python dependencies to speed up builds.
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Upgrade pip and install your project dependencies.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Run your unit tests to ensure your code works.
      - name: Run Tests
        run: pytest tests

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      # Step 1: Check out your repository again.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up the same Python environment.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Step 3: Cache dependencies (same as in the build job).
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Upgrade pip and install dependencies (ensuring consistency).
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Deploy your application.
      # Note: If your weather dashboard starts a server or long-running process,
      # you may want to run it in the background (using '&') or use a proper deployment service.
      - name: Deploy Application
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          python src/weather_dashboard.py &